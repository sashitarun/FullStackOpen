{"version":3,"sources":["components/services/persons.js","components/Persons.js","components/PersonsForm.js","components/Filter.js","components/Notification.js","components/App.js","index.js"],"names":["baseurl","axios","get","then","response","data","id","PersonObject","put","post","delete","Persons","persons","filterName","contactDelete","person","console","log","window","confirm","name","personService","catch","error","location","reload","map","key","number","onClick","filteredPersons","filter","lowerName","toLowerCase","lowerFilterName","includes","PersonForm","props","onSubmit","addContact","onChange","handleNameChange","handleNumberChange","type","Filter","handleFilterNameChange","Notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilterName","setMessage","useEffect","event","target","value","PersonsForm","preventDefault","reset","findIndex","alert","find","p","contactObject","setTimeout","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ebf636d.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseurl = '/api/persons'\n\nconst getAll = () =>\n{\n    const request = axios.get(baseurl)\n    return request.then(response => response.data)\n}\n\nconst update = (id , PersonObject) =>\n{\n    const request =  axios.put(`${baseurl}/${id}`,PersonObject)\n    return request.then(response => response.data)\n}\n\nconst create = (PersonObject) =>\n{\n    const request = axios.post(baseurl,PersonObject)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = (id) =>\n{\n    const request = axios.delete(`${baseurl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {getAll,update,create,deletePerson}","import React from 'react'\nimport personService from './services/persons'\n\nfunction Persons({persons,filterName}) {\n\n    const contactDelete = ({person}) =>\n    {\n        console.log(person)\n       if(window.confirm(`Delete ${person.name} ?`))\n       {\n           console.log('Deleting ', person.name)\n           personService.deletePerson(person.id)\n           .then(person => console.log('Successfully deleted'))\n           .catch(error => console.log(\"Failed\"))\n       }\n       else console.log('No')\n       window.location.reload(false)\n    }\n\n\n    if(filterName === ''){\n    return (\n        <div>\n            {\n                persons.map((person) => \n                <p key={person.name}>\n                    {person.name} {person.number}\n                    <button onClick={() => contactDelete({person})} > delete </button>\n                </p>)\n            }\n        </div>\n    )\n    }\n    else\n    {\n        var filteredPersons = persons.filter((person) =>\n        {\n            var name = person.name;\n            var lowerName = name.toLowerCase()\n            var lowerFilterName = filterName.toLowerCase()\n            if(lowerName.includes(lowerFilterName) === true)\n            {\n                console.log(person)\n                return person\n            }\n            else return null\n        })\n        return(\n            <div>\n                {\n                    filteredPersons.map((person) =>\n                     <p key={person.name}> \n                     {person.name} {person.number} <button onClick={() => contactDelete({person})} > delete </button>\n                    </p>)\n                }\n            </div>\n        )\n    }\n}\n\nexport default Persons\n","import React from 'react'\n\nconst PersonForm = (props) =>\n{\n  \n    return(\n        <form onSubmit={props.addContact} >\n          <div>\n            {/* name: <input value={newName} onChange={(e) => setNewName(e.target.value)}/> <br/> */}\n            name: <input onChange={props.handleNameChange} /><br/>\n            number: <input onChange={props.handleNumberChange}  />\n            {/* number: <input value={newNumber} onChange={(e)=> setNewNumber(e.target.value)} /> */}\n          </div>\n          <div>\n            <button type=\"submit\" >add</button>\n          </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = (props)  => {\n    return (\n        <div>\n            filter shown with <input onChange={props.handleFilterNameChange} />\n        </div>\n    )\n}\n\nexport default Filter\n","import React from 'react'\nimport './index.css'\n\nfunction Notification({message}) {\n    if(message !== null)\n    return (\n        <div className='message'>\n            {message}\n        </div>\n    )\n    else return null\n}\n\nexport default Notification\n","import React, {useState,useEffect} from 'react'\nimport Persons from './Persons'\nimport PersonsForm from './PersonsForm'\nimport Filter from './Filter'\nimport personService from './services/persons'\nimport Notification from './Notification'\n\nconst App = () => {\n    const [ persons, setPersons ] = useState([]) \n    const [ newName, setNewName ] = useState('')\n    const [ newNumber , setNewNumber] = useState('')\n    const [ filterName , setFilterName] = useState('')\n    const [ message, setMessage] =useState(null)\n\n  \n    useEffect(() => {\n      \n      personService.getAll()\n      .then(person =>\n         {\n           setPersons(person)\n         })\n    }, [])\n\n    const addContact = (event) =>\n    {\n        event.preventDefault()\n        event.target.reset()\n        if((persons.findIndex((person) => (person.name === newName)  && (person.number === newNumber))) !== -1)\n        {\n            window.alert(`${newName} is already added to phonebook`)\n        }\n        else if((persons.findIndex((person) => (person.name === newName)  && (person.number !== newNumber))) !== -1)\n        {\n            if(window.confirm(`${newName} is already added to phonebook , replace the old number with the new one ? `))\n            {\n                const person = persons.find((p) => p.name === newName)\n                const contactObject =\n                {\n                    name : newName,\n                    number : newNumber,\n                    id : person.id \n                }\n                //console.log(person)\n                personService.update(person.id , contactObject)\n                .then(response => {setPersons(persons.map(p => p.id !== person.id ? p : contactObject ))})\n                setMessage(`${newName}'s contact has been updated`)\n                setTimeout(() => {\n                  setMessage(null)\n                }, 3000)\n            }   \n        }\n        else\n        {\n           // console.log(newName)\n            const contactObject =\n            {\n                name : newName,\n                number : newNumber\n            }\n\n            personService.create(contactObject)\n            .then(response =>\n              setPersons(persons.concat(contactObject)))\n            setMessage(`${newName}'s contact has been created`)\n            setTimeout(() => {\n              setMessage(null)\n            }, 3000)\n\n        }\n    }\n\n    // const deleteContact = ({person}) =>\n    // {\n\n    // }\n\n    const handleNameChange = (event) =>\n    {\n        setNewName(event.target.value)\n        \n    }\n    const handleNumberChange = (event) =>\n    {\n        setNewNumber(event.target.value)   \n    }\n    const handleFilterNameChange = (event) =>\n    {\n        setFilterName(event.target.value)\n    }\n  \n\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <Notification message={message} />\n        <Filter handleFilterNameChange = {handleFilterNameChange}/>\n        <h2>Add a new </h2> \n        <PersonsForm \n          addContact = {addContact} \n          handleNameChange = {handleNameChange}\n          handleNumberChange = {handleNumberChange} />\n        <h2>Numbers</h2>\n        <Persons persons={persons} filterName ={filterName}/>\n      </div>\n    )\n  }\n export default App  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\n\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n"],"sourceRoot":""}